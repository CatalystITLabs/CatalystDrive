<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
             xmlns="http://www.springframework.org/schema/security"
			 xsi:schemaLocation="http://www.springframework.org/schema/beans 
								http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
								http://www.springframework.org/schema/security 
								http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	<!-- Spring security tags are the default namespace, hence no security prefix necessar for those tags -->					
  
  <!--    Use this bean if you want to map ldap authorities to app-specific authorities.  -->
  <!--    Make sure to change to correct fully qualified class name, enable this bean in ldapActiveDirectory AuthProvider, and -->
  <!--    and make necessary application specific changes within the class itself -->
<!--   <beans:bean id="grantedAuthoritiesMapper" class="com.catalyst.drive.security.ActiveDirectoryGrantedAuthoritiesMapper"/> -->
  
  <!--    Use this bean if you want to pull authorities from your own database after ldap authentication. -->
  <!--    Make sure to change to correct fully qualified class name, enable this bean in ldapActiveDirectory AuthProvider, and -->
  <!--    and make necessary application specific changes within the class itself -->
  <beans:bean id="appUserDetailsContextMapper" class="com.catalyst.drive.security.UserDetailsContextMapperImpl" />
  
  <authentication-manager>
    <authentication-provider ref="ldapActiveDirectoryAuthProvider" />
  </authentication-manager>
 
  <beans:bean id="ldapActiveDirectoryAuthProvider" class="com.catalyst.drive.security.ActiveDirectoryLdapAuthenticationProvider">
    <beans:constructor-arg value="catalystsolves.com" />
    <beans:constructor-arg value="ldap://corpdc01.catalystsolves.com/" />
<!--     <beans:property name="authoritiesMapper" ref="grantedAuthoritiesMapper" /> -->
    <beans:property name="userDetailsContextMapper" ref="appUserDetailsContextMapper"/>
    <beans:property name="useAuthenticationRequestCredentials" value="true" />
    <beans:property name="convertSubErrorCodesToExceptions" value="true" />
  </beans:bean>

		<!-- Allow access to static resources and login page -->
  <http pattern="/css/**" security="none" />
  <http pattern="/images/**" security="none" />
  <http pattern="/js/**" security="none" />
  <http pattern="/favicon.ico" security="none" />
  <http pattern="/login.html*" security="none" />	
 
  <http auto-config="true" use-expressions="true">
    <intercept-url pattern="/" access="permitAll" />
    <intercept-url pattern="/login.html*" access="permitAll" />
    		<!-- This pattern's controller method is where any redirects should be made -->
    <intercept-url pattern="/logon.html" access="isAuthenticated()" />
    <!-- Do not allow any anonymous access to the application besides login page above -->
    <intercept-url pattern="/*" access="isAuthenticated()" />
    		<!-- Add other path intercept urls for various roles here -->
    <form-login login-page="/login.html" default-target-url="/logon.html" authentication-failure-url="/login.html?login_error=true" />
    <logout logout-url="/logout.html" logout-success-url="/login.html?logout=true" invalidate-session="true"/>
    <session-management invalid-session-url="/login.html" />
  </http>
</beans:beans>